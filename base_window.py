#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.5 on Thu Jun 25 20:39:47 2020
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class BaseFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.font = wx.Font(120, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "")
        self.SetSize((1000, 700))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"退出", "")
        self.Bind(wx.EVT_MENU, self.exit_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"主菜单")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"正序学习", "")
        self.Bind(wx.EVT_MENU, self.learn100_order_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"倒序学习", "")
        self.Bind(wx.EVT_MENU, self.learn100_antiorder_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"随机学习", "")
        self.Bind(wx.EVT_MENU, self.learn100_random_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"认识100")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"正序学习", "")
        self.Bind(wx.EVT_MENU, self.add_order_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"倒序学习", "")
        self.Bind(wx.EVT_MENU, self.add_antiorder_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"随机学习", "")
        self.Bind(wx.EVT_MENU, self.add_random_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"加法")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"正序学习", "")
        self.Bind(wx.EVT_MENU, self.subtract_order_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"倒序学习", "")
        self.Bind(wx.EVT_MENU, self.subtract_antiorder_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"随机学习", "")
        self.Bind(wx.EVT_MENU, self.subtract_random_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"减法")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"开始学习", "")
        self.Bind(wx.EVT_MENU, self.multiplication_table_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"乘法表")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"正序学习", "")
        self.Bind(wx.EVT_MENU, self.multiplication_order_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"倒序学习", "")
        self.Bind(wx.EVT_MENU, self.multiplication_antiorder_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"随机学习", "")
        self.Bind(wx.EVT_MENU, self.multiplication_random_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"乘法")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"正序学习", "")
        self.Bind(wx.EVT_MENU, self.division_order_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"倒序学习", "")
        self.Bind(wx.EVT_MENU, self.division_antiorder_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"随机学习", "")
        self.Bind(wx.EVT_MENU, self.division_random_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"除法")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"120号字体", "")
        self.Bind(wx.EVT_MENU, self.small_font_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"140号字体", "")
        self.Bind(wx.EVT_MENU, self.middle_font_handle, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"160号字体", "")
        self.Bind(wx.EVT_MENU, self.big_font_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"设置")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, u"关于", "")
        self.Bind(wx.EVT_MENU, self.about_handle, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, u"帮助")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.panel = wx.Panel(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(u"四则运算入门")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def exit_handle(self, event):
        """ 关闭窗口 """
        self.Close()

    def learn100_order_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'learn100_order_handle' not implemented!")
        event.Skip()

    def learn100_antiorder_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'learn100_antiorder_handle' not implemented!")
        event.Skip()

    def learn100_random_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'learn100_random_handle' not implemented!")
        event.Skip()

    def add_order_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'add_order_handle' not implemented!")
        event.Skip()

    def add_antiorder_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'add_antiorder_handle' not implemented!")
        event.Skip()

    def add_random_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'add_random_handle' not implemented!")
        event.Skip()

    def subtract_order_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'subtract_order_handle' not implemented!")
        event.Skip()

    def subtract_antiorder_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'subtract_antiorder_handle' not implemented!")
        event.Skip()

    def subtract_random_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'subtract_random_handle' not implemented!")
        event.Skip()

    def multiplication_table_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'multiplication_handle' not implemented!")
        event.Skip()

    def multiplication_order_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'multiplication_order_handle' not implemented!")
        event.Skip()

    def multiplication_antiorder_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'multiplication_antiorder_handle' not implemented!")
        event.Skip()

    def multiplication_random_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'multiplication_random_handle' not implemented!")
        event.Skip()

    def division_order_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'division_order_handle' not implemented!")
        event.Skip()

    def division_antiorder_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'division_antiorder_handle' not implemented!")
        event.Skip()

    def division_random_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'division_random_handle' not implemented!")
        event.Skip()

    def small_font_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        self.font = wx.Font(120, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "")

    def middle_font_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        self.font = wx.Font(140, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "")

    def big_font_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        self.font = wx.Font(160, wx.FONTFAMILY_ROMAN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "")

    def about_handle(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'about_handle' not implemented!")
        event.Skip()


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = BaseFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
